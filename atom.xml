<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>辰风凌云的博客</title>
  <icon>https://www.gravatar.com/avatar/d4859fda4f8ded79d064a693d54ed7e2</icon>
  
  <link href="https://ten-fei.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://ten-fei.gitee.io/"/>
  <updated>2021-01-28T13:11:52.377Z</updated>
  <id>https://ten-fei.gitee.io/</id>
  
  <author>
    <name>辰风凌云</name>
    <email>2792498102@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo博客发布到github与码云上</title>
    <link href="https://ten-fei.gitee.io/2021/01/28/hexo%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%88%B0github%E4%B8%8E%E7%A0%81%E4%BA%91%E4%B8%8A/"/>
    <id>https://ten-fei.gitee.io/2021/01/28/hexo%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%88%B0github%E4%B8%8E%E7%A0%81%E4%BA%91%E4%B8%8A/</id>
    <published>2021-01-28T11:38:29.000Z</published>
    <updated>2021-01-28T13:11:52.377Z</updated>
    
    <content type="html"><![CDATA[<p>将新建的个人博客免费发布到GitHub和码云上，这样不用在本地就可以访问个人博客，也能为别人分享自己的学习成果！！！</p><h2 id="1-git密钥与全局配置"><a href="#1-git密钥与全局配置" class="headerlink" title="1.git密钥与全局配置"></a>1.git密钥与全局配置</h2><ol><li>密钥配置(电脑任意目录输入)</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>密钥位置</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;C:\Users\你的电脑用户名\.ssh\id_rsa.pub&quot;</span><br></pre></td></tr></table></figure><h2 id="2-博客发布到GitHub"><a href="#2-博客发布到GitHub" class="headerlink" title="2.博客发布到GitHub"></a>2.博客发布到GitHub</h2><ol><li><p>注册github账号，这一步跳过</p></li><li><p>git密钥绑定</p><ul><li><p>登录github右上角找到并打开settings；</p><p>  <img src="/2021/01/28/hexo%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%88%B0github%E4%B8%8E%E7%A0%81%E4%BA%91%E4%B8%8A/github1.png" alt="settings"></p></li><li><p>找到SHH and GPG keys；</p><p>  <img src="/2021/01/28/hexo%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%88%B0github%E4%B8%8E%E7%A0%81%E4%BA%91%E4%B8%8A/github2.jpg" alt="SSH and GPG keys"></p></li><li><p>右上角找到New SSH key；</p><p>  <img src="/2021/01/28/hexo%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%88%B0github%E4%B8%8E%E7%A0%81%E4%BA%91%E4%B8%8A/github3.png" alt="New SSH key"></p></li><li><p>将C:\Users\你的电脑用户名.ssh\id_rsa.pub里的内容填到Key这一栏中，Title不用填(可用vscode打开)，然后Add SSH key。</p></li></ul></li><li><p>新建仓库</p><ul><li><p>github首页右上角找到New，进到新建仓库页面；</p><p>  <img src="/2021/01/28/hexo%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%88%B0github%E4%B8%8E%E7%A0%81%E4%BA%91%E4%B8%8A/github4.png" alt="New"></p></li><li><p>注意!!! Owner与Repository name一栏命名一定要一致，要不然博客页面打不可或者渲染不了，如我的用户名为chenfeng-lingyun，那么我的Owner与Repository name分别是chenfeng-lingyun/chenfeng-lingyun.github.io；</p></li><li><p>其它默认，然后确认。</p></li><li><p>新建仓库如图：<br>  <img src="/2021/01/28/hexo%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%88%B0github%E4%B8%8E%E7%A0%81%E4%BA%91%E4%B8%8A/github5.png" alt="New entrepot"></p></li><li><p>复制如图地址。</p></li></ul></li><li><p>发布博客</p><ul><li><p>打开站点配置文件，找到deploy进行如下配置；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository:</span><br><span class="line">        github: https:&#x2F;&#x2F;github.com&#x2F;xxxx&#x2F;xxxx.github.io.git  你的新建仓库地址</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></li><li><p>博客根目录输入；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &#39;你的邮箱地址&#39;</span><br><span class="line">git config --global user.name &#39;你的用户名&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>利用xxxx.github.io便可与访问你的博客，如无法访问看看是否仓库地址与用户名是否一致，每次更新执行hexo三大命令。</p><h2 id="3-博客发布到码云"><a href="#3-博客发布到码云" class="headerlink" title="3.博客发布到码云"></a>3.博客发布到码云</h2></li></ul><ol><li>码云发布博客与GitHub发布博客类似，有一些地方要注意；</li><li>在配置deploy时：</li></ol><ul><li>这中写法可以保证GitHub与码云同步发布<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository:</span><br><span class="line">        github: https:&#x2F;&#x2F;github.com&#x2F;xxxx&#x2F;xxxx.github.io.git  你的github新建仓库地址</span><br><span class="line">        gitee: https:&#x2F;&#x2F;gitee.com&#x2F;xxxx&#x2F;xxxx.git  你的码云新建仓库</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>码云因为服务器在国内访问速度会比GitHub快很多，但比GitHub多Gitee Pages一项</li></ol><ul><li><p>找到gitee新建仓库，打开Gitee Pages</p><p>  <img src="/2021/01/28/hexo%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%88%B0github%E4%B8%8E%E7%A0%81%E4%BA%91%E4%B8%8A/gitee1.png" alt="Gitee Pages"></p></li><li><p>点击启用<br>  <img src="/2021/01/28/hexo%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%88%B0github%E4%B8%8E%E7%A0%81%E4%BA%91%E4%B8%8A/gitee2.png" alt="Gitee Pages"></p></li><li><p>利用xxxx.gitee.io便可以访问你的博客，只是每次更新博客都要在Gitee Pages里面点击更新，其它与github一致。</p></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将新建的个人博客免费发布到GitHub和码云上，这样不用在本地就可以访问个人博客，也能为别人分享自己的学习成果！！！&lt;/p&gt;
&lt;h2 id=&quot;1-git密钥与全局配置&quot;&gt;&lt;a href=&quot;#1-git密钥与全局配置&quot; class=&quot;headerlink&quot; title=&quot;1.</summary>
      
    
    
    
    <category term="Hexo" scheme="https://ten-fei.gitee.io/categories/Hexo/"/>
    
    
    <category term="github" scheme="https://ten-fei.gitee.io/tags/github/"/>
    
    <category term="码云" scheme="https://ten-fei.gitee.io/tags/%E7%A0%81%E4%BA%91/"/>
    
    <category term="博客发布" scheme="https://ten-fei.gitee.io/tags/%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>Hexo压缩静态资源</title>
    <link href="https://ten-fei.gitee.io/2021/01/28/Hexo%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    <id>https://ten-fei.gitee.io/2021/01/28/Hexo%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</id>
    <published>2021-01-28T10:31:57.000Z</published>
    <updated>2021-01-28T11:21:53.015Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo博客要用到大量图片,大量代码,比如HTML，CSS,JavaScript，利用gulp插件可以有效压缩网页博客静态资源，提高网页加载速度……</p><h2 id="1-安装gulp插件"><a href="#1-安装gulp插件" class="headerlink" title="1.安装gulp插件"></a>1.安装gulp插件</h2><ol><li>插件安装用到npm包管理器,也可使用cnpm,前提是已安装。</li><li>在博客根目录运行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.  npm install gulp -g</span><br><span class="line">    npm link gulp</span><br><span class="line"></span><br><span class="line">2.  npm install gulp-minify-css --save</span><br><span class="line">    npm install gulp-uglify --save</span><br><span class="line">    npm install gulp-htmlmin --save</span><br><span class="line">    npm install gulp-htmlclean --save</span><br><span class="line">    npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure><h2 id="2-创建gulpfile-js文件"><a href="#2-创建gulpfile-js文件" class="headerlink" title="2.创建gulpfile.js文件"></a>2.创建gulpfile.js文件</h2></li><li>在博客根目录创建gulpfile.js文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gulp &#x3D; require(&#39;gulp&#39;);</span><br><span class="line">var minifycss &#x3D; require(&#39;gulp-minify-css&#39;);</span><br><span class="line">var uglify &#x3D; require(&#39;gulp-uglify&#39;);</span><br><span class="line">var htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;);</span><br><span class="line">var htmlclean &#x3D; require(&#39;gulp-htmlclean&#39;);</span><br><span class="line">var imagemin &#x3D; require(&#39;gulp-imagemin&#39;);</span><br><span class="line">&#x2F;&#x2F; 压缩css文件</span><br><span class="line">gulp.task(&#39;minify-css&#39;, function() &#123;</span><br><span class="line">  return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.css&#39;)</span><br><span class="line">  .pipe(minifycss())</span><br><span class="line">  .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 压缩html文件</span><br><span class="line">gulp.task(&#39;minify-html&#39;, function() &#123;</span><br><span class="line">  return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)</span><br><span class="line">  .pipe(htmlclean())</span><br><span class="line">  .pipe(htmlmin(&#123;</span><br><span class="line">    removeComments: true,</span><br><span class="line">    minifyJS: true,</span><br><span class="line">    minifyCSS: true,</span><br><span class="line">    minifyURLs: true,</span><br><span class="line">  &#125;))</span><br><span class="line">  .pipe(gulp.dest(&#39;.&#x2F;public&#39;))</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 压缩js文件</span><br><span class="line">gulp.task(&#39;minify-js&#39;, function() &#123;</span><br><span class="line">    return gulp.src([&#39;.&#x2F;public&#x2F;**&#x2F;.js&#39;,&#39;!.&#x2F;public&#x2F;js&#x2F;**&#x2F;*min.js&#39;])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 压缩 public&#x2F;demo 目录内图片</span><br><span class="line">gulp.task(&#39;minify-images&#39;, function() &#123;</span><br><span class="line">    gulp.src(&#39;.&#x2F;public&#x2F;demo&#x2F;**&#x2F;*.*&#39;)</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">           optimizationLevel: 5, &#x2F;&#x2F;类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class="line">           progressive: true, &#x2F;&#x2F;类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class="line">           interlaced: false, &#x2F;&#x2F;类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class="line">           multipass: false, &#x2F;&#x2F;类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;uploads&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 默认任务 gulp 4.0 适用的方式</span><br><span class="line">gulp.task(&#39;default&#39;, gulp.parallel(&#39;minify-html&#39;, &#39;minify-css&#39;, &#39;minify-js&#39;</span><br><span class="line"> &#x2F;&#x2F;build the website</span><br><span class="line">));</span><br></pre></td></tr></table></figure><h2 id="3-执行命令"><a href="#3-执行命令" class="headerlink" title="3.执行命令"></a>3.执行命令</h2></li><li>只要在每次执行hexo g命令后执行gulp就可以进行静态资源压缩，压缩后再同步到博客服务器上<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hexo博客要用到大量图片,大量代码,比如HTML，CSS,JavaScript，利用gulp插件可以有效压缩网页博客静态资源，提高网页加载速度……&lt;/p&gt;
&lt;h2 id=&quot;1-安装gulp插件&quot;&gt;&lt;a href=&quot;#1-安装gulp插件&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="Hexo" scheme="https://ten-fei.gitee.io/categories/Hexo/"/>
    
    
    <category term="gulp" scheme="https://ten-fei.gitee.io/tags/gulp/"/>
    
    <category term="Hexo压缩" scheme="https://ten-fei.gitee.io/tags/Hexo%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo无法使用本地图片</title>
    <link href="https://ten-fei.gitee.io/2021/01/25/%E5%85%B3%E4%BA%8Ehexo%E6%97%A0%E6%B3%95%E8%B0%83%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
    <id>https://ten-fei.gitee.io/2021/01/25/%E5%85%B3%E4%BA%8Ehexo%E6%97%A0%E6%B3%95%E8%B0%83%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</id>
    <published>2021-01-25T07:39:15.000Z</published>
    <updated>2021-01-28T12:09:46.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li>hexo中文章为markdown写法，当调用本地图片时出现无法调用或者一段时间后调用的图片发生变化导致图片加载不出来；</li><li>早期大部分的方案是把图片放在 source/img 下，然后在 markdown 里写 ![img] (/source/img/img.png) 。显然这样在本地的编辑器里完全不能正确识别图片的位置。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>在hexo主配置文件中将 post_asset_folder: false 改成 post_asset_folder:true ；</li><li>在hexo博客根目录执行cnpm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> –save；</li><li>执行hexo new “hello”，会在source/_posts里面生成hello.md文件与hello的文件夹；</li><li>把要添加的图片放在hello的文件夹里面，然后![title] (hello/图片名)来调用图片。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;hexo中文章为markdown写法，当调用本地图片时出现无法调用或者一段时间后调用的图片发生变化导致图片加载不出来；&lt;/li&gt;</summary>
      
    
    
    
    <category term="Hexo" scheme="https://ten-fei.gitee.io/categories/Hexo/"/>
    
    
    <category term="markdown调用图片" scheme="https://ten-fei.gitee.io/tags/markdown%E8%B0%83%E7%94%A8%E5%9B%BE%E7%89%87/"/>
    
    <category term="Hexo使用本地图片" scheme="https://ten-fei.gitee.io/tags/Hexo%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客安装+butterfly主题应用</title>
    <link href="https://ten-fei.gitee.io/2021/01/25/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85+butterfly%E4%B8%BB%E9%A2%98%E5%BA%94%E7%94%A8/"/>
    <id>https://ten-fei.gitee.io/2021/01/25/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85+butterfly%E4%B8%BB%E9%A2%98%E5%BA%94%E7%94%A8/</id>
    <published>2021-01-25T05:00:43.000Z</published>
    <updated>2021-01-28T11:23:53.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo博客安装-butterfly主题置换-本地运行"><a href="#hexo博客安装-butterfly主题置换-本地运行" class="headerlink" title="hexo博客安装+butterfly主题置换+本地运行"></a>hexo博客安装+butterfly主题置换+本地运行</h1><h2 id="1-安装中间件"><a href="#1-安装中间件" class="headerlink" title="1.安装中间件"></a>1.安装中间件</h2><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><ol><li>git官网&emsp;<a href="https://git-scm.com/">https://git-scm.com/</a>&emsp;下载git安装；</li><li>选择你的安装路径,一路默认安装,在以下选择你的默认编辑器；</li></ol><center class="half">    <img src="/2021/01/25/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85+butterfly%E4%B8%BB%E9%A2%98%E5%BA%94%E7%94%A8/git1.jpg"></center><ol start="3"><li><p>然后在鼠标右键出现Git GUI Here与Git Bash Here代表安装成功,Git Bash Here将是我们以下要用的。</p><center class="half"> <img src="/2021/01/25/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85+butterfly%E4%B8%BB%E9%A2%98%E5%BA%94%E7%94%A8/git2.jpg"></center></li><li><p>我用的是vscode,所以选Use Visual Studio Code as Git’s default editor。</p><h3 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h3></li><li><p>nodejs官网&emsp;<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a> &emsp;下载长期支持(LTS)版本；</p></li><li><p>选择你要安装的路径其他默认；</p></li><li><p>打开Git Bash Here或CMD输入node -v与nmp -v出现以下字样代表安装成功。</p><center class="half"> <img src="/2021/01/25/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85+butterfly%E4%B8%BB%E9%A2%98%E5%BA%94%E7%94%A8/node.jpg"></center></li></ol><h2 id="2-Hexo博客安装"><a href="#2-Hexo博客安装" class="headerlink" title="2.Hexo博客安装"></a>2.Hexo博客安装</h2><h3 id="博客框架安装"><a href="#博客框架安装" class="headerlink" title="博客框架安装"></a>博客框架安装</h3><ol><li>打开Git Bash Here，输入npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org,利用npm下载cnpm将镜像源切换成淘宝镜像源,以后可以将npm命令用cnpm命令代替,安装完后输入cnpm出现以下内容代表安装成功;/">https://registry.npm.taobao.org，利用npm下载cnpm将镜像源切换成淘宝镜像源，以后可以将npm命令用cnpm命令代替，安装完后输入cnpm出现以下内容代表安装成功；</a></li></ol><center class="half">    <img src="/2021/01/25/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85+butterfly%E4%B8%BB%E9%A2%98%E5%BA%94%E7%94%A8/npm.jpg"></center><ol start="2"><li>接着输入cnpm install -g hexo-cli进行全局安装博客框架，完成后输入hexo -v，出现以下内容代表安装成功。<center class="half"> <img src="/2021/01/25/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85+butterfly%E4%B8%BB%E9%A2%98%E5%BA%94%E7%94%A8/hexo.jpg"></center></li></ol><h3 id="博客本体安装"><a href="#博客本体安装" class="headerlink" title="博客本体安装"></a>博客本体安装</h3><ol><li><p>在电脑新建一个空文件夹用于保存博客本地文件，我是在桌面新建了一个名为MyBlog的文件夹，名字最好取英文，打开文件夹，右键打开Git Bash Here输入hexo init，过程会有点慢，如果卡住，将刚生成的文件全删除了，然后输入npm config set registry <a href="https://registry.npm.taobao.org,再次输入hexo/">https://registry.npm.taobao.org，再次输入hexo</a> init最后面出现&emsp;INFO  Start blogging with Hexo!&emsp;代表成功了；</p></li><li><p>在Git Bash Here中输入hexo s，复制下面的 <a href="http://localhost:4000在浏览器中打开，即可看到hexo博客页面；注意！！！在此之前一定要把电脑的防火墙关了，以防电脑把4000端口屏蔽了；">http://localhost:4000在浏览器中打开，即可看到hexo博客页面；注意！！！在此之前一定要把电脑的防火墙关了，以防电脑把4000端口屏蔽了；</a></p></li><li><p>hexo基本命令；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean 清理缓存</span><br><span class="line">hexo g 重新生产静态页面</span><br><span class="line">hexo s 打开本地调试运行端口</span><br><span class="line">hexo d 将博客静态页面推送的远端服务器</span><br></pre></td></tr></table></figure></li><li><p>本地生产文件详解</p><ul><li>运行完hexo init后将在该文件夹中生成以下文件：<center class="half"><img src="/2021/01/25/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85+butterfly%E4%B8%BB%E9%A2%98%E5%BA%94%E7%94%A8/hexojg.jpg"></center><br></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules: 用于存放hexo插件</span><br><span class="line"></span><br><span class="line">public: 默认不存在，在运行hexo g时生成，用于存放hexo生成的静态网页，在运行hexo clean时被清除</span><br><span class="line"></span><br><span class="line">scaffolds: hexo的模板文件夹，不过这里的“模板”概念没有那么高端。这个“模板”就是指新建的markdown文件的模板，每新建一个markdown文件（由于Hexo使用markdown语法，在渲染生成静态HTML页面之前，源文件都是markdown文件），就会包含对应模板的内容。</span><br><span class="line"></span><br><span class="line">source: hexo资源文件夹。用来存放图片、Markdown文档（文章、草稿）、各种页面（分类、关于页面等）。</span><br><span class="line"></span><br><span class="line">themes: 主题文件夹，每一个主题，都有一个单独的文件夹，默认主题为landscape。</span><br><span class="line"></span><br><span class="line">_config.yml: 站点配置文件，用来配置博客站点功能。</span><br><span class="line"></span><br><span class="line">package.json: 用来查看Hexo的版本以及相关依赖包的版本。</span><br><span class="line"></span><br><span class="line">其它功能具体有什么作用还未知......</span><br></pre></td></tr></table></figure><h2 id="3-Butterfly主题替换与博客发表"><a href="#3-Butterfly主题替换与博客发表" class="headerlink" title="3.Butterfly主题替换与博客发表"></a>3.Butterfly主题替换与博客发表</h2></li><li><p>主题替换</p><ul><li>博客本地文件夹打开Git Bash Here输入git clone <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/butterfly，完成后会在themes主题文件夹里面生成一个butterfly文件夹，这就是要替换的主题文件；</li><li>用vscode打开站点配置文件，_config.yml，按Ctrl+F搜索theme，将landscape换成butterfly，保存，然后依次运行hexo clean,hexo g,hexo s,然后在浏览器中输入<a href="http://localhost:4000；">http://localhost:4000；</a></li><li>注意！！！如果出现&emsp;extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug&emsp;在博客本地文件夹下输入&emsp;npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive&emsp;然后继续hexo s，刷新以下页面发现主题已经替换成功了；</li></ul></li><li><p>文章发表</p><ul><li>在博客本地文件夹下输入hexo new “我的第一篇博客”，然后会在source/_posts下生成“我的第一篇博客.md”的markdown文档，该文档支持markdown语法格式</li><li>—与—之间是页面配置文件(缺省可添加)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 文章标题</span><br><span class="line">date: 文章发表日期</span><br><span class="line">updated: 文章更新日期</span><br><span class="line">tags: 文章标签</span><br><span class="line">categories: 文章分类</span><br><span class="line">description: 文章描述</span><br><span class="line">top_img: 文章顶部图片</span><br><span class="line">cover: 文章缩略图(目录展示图)</span><br><span class="line"></span><br><span class="line">其它具体用处不大</span><br><span class="line">---以下是文章内容部分</span><br></pre></td></tr></table></figure></li><li>然后hexo clean,hexo g,hexo s重新生成。<center class="half"><img src="/2021/01/25/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85+butterfly%E4%B8%BB%E9%A2%98%E5%BA%94%E7%94%A8/firstblog.jpg"></center></li></ul></li></ol><h2 id="下篇讲如何美化主题"><a href="#下篇讲如何美化主题" class="headerlink" title="下篇讲如何美化主题"></a>下篇讲如何美化主题</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo博客安装-butterfly主题置换-本地运行&quot;&gt;&lt;a href=&quot;#hexo博客安装-butterfly主题置换-本地运行&quot; class=&quot;headerlink&quot; title=&quot;hexo博客安装+butterfly主题置换+本地运行&quot;&gt;&lt;/a&gt;hexo博</summary>
      
    
    
    
    <category term="Hexo" scheme="https://ten-fei.gitee.io/categories/Hexo/"/>
    
    
    <category term="butterfly主题" scheme="https://ten-fei.gitee.io/tags/butterfly%E4%B8%BB%E9%A2%98/"/>
    
    <category term="Hexo博客" scheme="https://ten-fei.gitee.io/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>css教程</title>
    <link href="https://ten-fei.gitee.io/2021/01/21/css%E6%95%99%E7%A8%8B/"/>
    <id>https://ten-fei.gitee.io/2021/01/21/css%E6%95%99%E7%A8%8B/</id>
    <published>2021-01-21T04:18:05.000Z</published>
    <updated>2021-01-22T12:13:49.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web用户面板"><a href="#Web用户面板" class="headerlink" title="Web用户面板"></a>Web用户面板</h1><h2 id="1-开发工具"><a href="#1-开发工具" class="headerlink" title="1.开发工具"></a>1.开发工具</h2><ul><li>Visual Studio Code &emsp;<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li><li>WebStorm &emsp;<a href="https://www.jetbrains.com/webstorm/">https://www.jetbrains.com/webstorm/</a><h2 id="2-测试工具"><a href="#2-测试工具" class="headerlink" title="2.测试工具"></a>2.测试工具</h2></li><li>浏览器</li></ul><ol><li>Microsoft Edge</li><li>Internet Explorer</li><li>Google Chrome</li><li>Mozilla FireFox</li><li>Apple Safari</li><li>…….<h2 id="3-推荐网站"><a href="#3-推荐网站" class="headerlink" title="3.推荐网站"></a>3.推荐网站</h2></li></ol><ul><li>MDN &emsp;<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></li><li>菜鸟教程 &emsp;<a href="http://www.runoob.com/">http://www.runoob.com/</a></li><li>W3school &emsp;<a href="http://www.w3school.com.cn/">http://www.w3school.com.cn/</a><h2 id="4-Vs-code常用快捷键与扩展"><a href="#4-Vs-code常用快捷键与扩展" class="headerlink" title="4.Vs code常用快捷键与扩展"></a>4.Vs code常用快捷键与扩展</h2></li><li>Ctrl + s   保存</li><li>Ctrl + z   撤销</li><li>Ctrl + y   恢复</li><li>Ctrl + c   复制</li><li>Ctrl + v   粘贴 </li><li>Ctrl + x   剪切</li><li>Ctrl + /   注释切换</li><li>Shift + Alt + f  格式化代码</li><li>Tab  Emmet切换</li><li>Alt + B   打开浏览器</li><li>HTML CSS Support</li><li>Prettier - Code formatter或者 Beautify css/sass/scss/less</li><li>Path lntellisense<h2 id="5-在浏览器Chrome中查看调试网页"><a href="#5-在浏览器Chrome中查看调试网页" class="headerlink" title="5.在浏览器Chrome中查看调试网页"></a>5.在浏览器Chrome中查看调试网页</h2></li><li>Elements  元素面板 -&gt; html+css</li><li>Console 控制台面板 -&gt; js</li><li>Sources 源代码面板 -&gt; js</li><li>Network 网络面板 -&gt; 网络请求</li><li>Performance 性能面板 -&gt; 性能调优</li><li>Memory 内存面板 -&gt; 性能调优</li><li>Application 应用面板 -&gt; 性能调优</li><li>Security 安全面板 -&gt; 安全防御</li></ul><ul><li>Audits 审计面板 -&gt; 自动化测试<h2 id="6-关于README-md"><a href="#6-关于README-md" class="headerlink" title="6.关于README.md"></a>6.关于README.md</h2></li><li>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</li><li>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</li><li>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</li><li>Markdown 编写的文档后缀为 .md, .markdown。<h2 id="7-HTML语言概述"><a href="#7-HTML语言概述" class="headerlink" title="7.HTML语言概述"></a>7.HTML语言概述</h2><h3 id="什么是HTMKL"><a href="#什么是HTMKL" class="headerlink" title="什么是HTMKL?"></a>什么是HTMKL?</h3></li></ul><ol><li>HTML 是用来描述网页的一种语言。</li><li>HTML指的是超文本标记语言:HyperText Markup Language。</li><li>HTML不是一种编程语言，而是一种标记语言。标记语言是一套标记标签(markup tag)。</li><li>HTML使用标记标签来描述网页。</li><li>HTML文档包含了HTML标签及文本内容。<h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3></li><li>HTML标记标签通常被称为HTML标签(HTML tag)。</li><li>HTML标签是由尖括号包围的关键词，比如&lt;html&gt;。</li><li>HTML标签通常是成对出现的，比如&lt;b&gt;和&lt;/b&gt;。</li><li>开始和结束标签也被称为开放标签和闭合标签。</li><li>标签对中的第一个标签是开始标签，第二个是结束标签。</li><li>HTML标签也存在一些单标签，比如&lt;img/&gt;。<h3 id="HTML默认搜索页"><a href="#HTML默认搜索页" class="headerlink" title="HTML默认搜索页"></a>HTML默认搜索页</h3></li></ol><ul><li>index.html</li><li>index.css</li><li>index.php</li><li>index.jsp<h3 id="HTML的head部分"><a href="#HTML的head部分" class="headerlink" title="HTML的head部分"></a>HTML的head部分</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;  定义了文档信息</span><br><span class="line">&lt;title&gt; 定义了文档信息</span><br><span class="line">&lt;bade&gt;  定义了页面链接标签的默认链接地址</span><br><span class="line">&lt;link&gt;  定义了一个文档和外部资源之间的关系</span><br><span class="line">&lt;meta&gt;  定义了HTML文档中的元数据</span><br><span class="line">&lt;script&gt;定义了HTML文档的样式</span><br></pre></td></tr></table></figure><h3 id="HTML的body部分"><a href="#HTML的body部分" class="headerlink" title="HTML的body部分"></a>HTML的body部分</h3></li></ul><ol><li>内容分区元素<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;,&lt;h2&gt;,&lt;h3&gt;,&lt;h4&gt;,&lt;h5&gt;,&lt;h6&gt;</span><br></pre></td></tr></table></figure></li><li>文本内容元素<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;, &lt;pre&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;, &lt;li&gt;</span><br><span class="line"></span><br><span class="line">&lt;ol&gt; ,&lt;li&gt;</span><br><span class="line"></span><br><span class="line">&lt;dl&gt;, &lt;dt&gt;,&lt;dd&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;blockquote&gt;</span><br></pre></td></tr></table></figure></li><li>内联文本元素<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;b&gt;, &lt;strong&gt;</span><br><span class="line"></span><br><span class="line">&lt;i&gt;, &lt;em&gt;</span><br><span class="line"></span><br><span class="line">&lt;a&gt;</span><br></pre></td></tr></table></figure></li><li>图片元素<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img&gt;</span><br></pre></td></tr></table></figure></li><li>内嵌内容元素<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="HTML数据呈现——表格"><a href="#HTML数据呈现——表格" class="headerlink" title="HTML数据呈现——表格"></a>HTML数据呈现——表格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">元素    描述</span><br><span class="line"></span><br><span class="line">&lt;table&gt;    表示表格数据 — 即通过二维数据表表示的信息。</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;    定义表格中的行。</span><br><span class="line"></span><br><span class="line">&lt;td&gt;    定义了一个包含数据的表格单元格。属性：colspan rowspan</span><br><span class="line"></span><br><span class="line">&lt;caption&gt;展示一个表格的标题， 它常常作为 &lt;table&gt; 的第一个子元素出现，同时显示在表格内容的最前面，但是，它同样可以被CSS样式化，所以，它同样可以出现在任何一个一个相对于表格的做任意位置。</span><br><span class="line"></span><br><span class="line">&lt;thead&gt;    定义了一组定义表格的列头的行。</span><br><span class="line"></span><br><span class="line">&lt;tbody&gt;    封装了一组表行，表示它们包含表的主体</span><br><span class="line"></span><br><span class="line">&lt;tfoot&gt;    定义了一组表格中各列的汇总行。</span><br><span class="line"></span><br><span class="line">&lt;th&gt;    定义表格内的表头单元格。属性：colspan rowspan</span><br><span class="line"></span><br><span class="line">&lt;colgroup&gt;表格列组 标签用来定义表中的一组列表。</span><br><span class="line"></span><br><span class="line">&lt;col&gt;    定义表格中的列，并用于定义所有公共单元格上的公共语义。它通常位于</span><br><span class="line"></span><br><span class="line">&lt;colgroup&gt;  元素内。</span><br></pre></td></tr></table></figure><h3 id="HTML数据交互——表单"><a href="#HTML数据交互——表单" class="headerlink" title="HTML数据交互——表单"></a>HTML数据交互——表单</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line">元素        描述</span><br><span class="line"></span><br><span class="line">&lt;form&gt;    表示了文档中的一个区域，此区域包含有交互控制元件，用来向 Web 服务器提交信息。 </span><br><span class="line"></span><br><span class="line">&lt;fieldset&gt; 用来对表单中的控制元素进行分组。</span><br><span class="line"></span><br><span class="line">&lt;legend&gt;代表一个用于表示它的父元素&lt;fieldset&gt;的内容的标题。</span><br><span class="line"></span><br><span class="line">&lt;label&gt;    表示用户界面中某个元素的说明。</span><br><span class="line"></span><br><span class="line">&lt;input&gt;     用于为基于Web的表单创建交互式控件，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件，具体取决于设备和user agent。</span><br><span class="line"></span><br><span class="line">&lt;select&gt;表示一个控件，提供一个选项菜单。</span><br><span class="line"></span><br><span class="line">&lt;option&gt;    用于定义在&lt;select&gt;,&lt;optgroup&gt;元素中包含的项。&lt;option&gt; 可以在弹出窗口和 html 文档中的其他项目列表中表示菜单项。</span><br><span class="line"></span><br><span class="line">&lt;optgroup&gt;  创建包含在一个 &lt;select&gt; 元素中的一组选项。</span><br><span class="line"></span><br><span class="line">&lt;textarea&gt;  表示一个多行纯文本编辑控件。</span><br><span class="line"></span><br><span class="line">&lt;button&gt;    表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方。</span><br></pre></td></tr></table></figure><h3 id="HTML语义化"><a href="#HTML语义化" class="headerlink" title="HTML语义化"></a>HTML语义化</h3></li><li>HTML语义化(Semantic)背景<blockquote><p>随着互联网的发展，WEB也承载越来越多的信息（图片，声音，视频等），人们开始用机器来处理网络信息，就此诞生了搜索引擎。如次庞大及复杂的信息如何让搜索引擎处理和挖掘，所以让机器能够更好地读懂WEB上内容就变得越来越重要。</p></blockquote></li><li>什么是语义化?<blockquote><p>通俗的来讲就是从代码上来展示页面的结构，而不是从最终视觉上来展示结构，在去掉或样式丢失的时候依然能让页面呈现清晰的结构。</p></blockquote></li><li>为什么要使用语义化标签?<blockquote><p>1.清晰的页面结构。去掉或样式丢失的时候,也能让页面呈现清晰的结构，增强页面的可读性。</p></blockquote></li></ol><blockquote><p>2.有利于 seo 优化,利于被搜索引擎收录(更便于搜索引擎的爬虫程序来识别)。利于SEO，语义化能和搜索引擎建立良好的联系，有利于爬虫抓取更多的有效信息。爬虫依赖于标签来确定上下文和各个关键字的权重。</p></blockquote><blockquote><p>3.方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以语义的方式来渲染网页。PDA、手机等设备可能无法像普通电脑的浏览器一样来渲染网页(通常是因为这些设备对 CSS的支持较弱),使用语义标记可以确保这些设备以一种有意义的方式来渲染网页.理想情况下,观看设备的任务是符合设备本身的条件来渲染网页。</p></blockquote><blockquote><p>4.便于团队开发和维护。W3C 给我们定了一个很好的标准,在团队中大家都遵循这个标准,可以减少很多差异化的东西,方便开发和维护,提高开发效率,甚至实现模块化开发。</p></blockquote><h3 id="HTML标签-1"><a href="#HTML标签-1" class="headerlink" title="HTML标签"></a>HTML标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;header&gt;  &lt;nav&gt; &lt;footer&gt;  &lt;article&gt; &lt;aside&gt; &lt;section&gt; &lt;address&gt; &lt;main&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;abbr&gt; &lt;dfn&gt; &lt;mark&gt; &lt;code&gt; &lt;small&gt; &lt;input&gt;  新类型</span><br></pre></td></tr></table></figure><h3 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h3><ul><li>常见属性：title  href  src  name  id  class value checked  disabled  </li><li>HTML属性参考 –&gt;<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes">传送门</a><h3 id="HTML颜色"><a href="#HTML颜色" class="headerlink" title="HTML颜色"></a>HTML颜色</h3></li><li>颜色由红(R)、绿(G)、蓝(B)组成。</li><li>使用颜色名<br><img src="https://p.ananas.chaoxing.com/star3/origin/e25e13bb33a6193e074a3c31e7f32266.png"></li><li>使用颜色值<br><img src="https://p.ananas.chaoxing.com/star3/origin/e25e13bb33a6193e074a3c31e7f32266.png"><h3 id="HTML其它"><a href="#HTML其它" class="headerlink" title="HTML其它"></a>HTML其它</h3></li><li>访问路径：绝对路径   相对路径</li><li>图像格式：PNG   JPG  SVG  GIF  BMP  ICO</li><li>字符实体：例如：&amp;nbsp；    &amp;copy；  &amp;reg；  &amp;lt； &amp;gt；完整列表：–&gt;<a href="https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references">传送门</a> </li><li>不建议使用<br><ul><li>标签，例如：center  font  marquee  等</li><li>属性，例如：border color bgcolor  width  height align 等<h2 id="8-CSS概述"><a href="#8-CSS概述" class="headerlink" title="8.CSS概述"></a>8.CSS概述</h2><h3 id="CSS用来干什么的？"><a href="#CSS用来干什么的？" class="headerlink" title="CSS用来干什么的？"></a>CSS用来干什么的？</h3><blockquote><p>CSS 是用来指定文档如何展示给用户的一门语言——如网页的样式、布局等。通过CSS实际上是将文档变成用户可用的文件，将文档在电脑屏幕、投影仪或打印机等设备上进行可视化展示。</p></blockquote></li></ul></li></ul><h3 id="CSS的渲染"><a href="#CSS的渲染" class="headerlink" title="CSS的渲染"></a>CSS的渲染</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/3b38172a8cbdf8ddbb9f83580e7df8da.png"></p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p><img src="https://p.ananas.chaoxing.com/star3/origin/5e758fed3608dee5f1e35318312ad792.png"></p><ul><li><p>语法由一个 选择器(selector)起头。 它选择(selects) 了将要用来添加样式的 HTML 元素。 接着是一对大括号{ }。 在大括号内部定义一个或多个形式为 属性(property):值(value); 的 声明，冒号之前是属性，冒号之后是值。不同的 CSS 属性(properties) 对应不同的合法值。</p></li><li><p>例如，上图中指定了 color 属性，可以设置所需颜色值；还有 font-size 属性，设置了字的尺寸。一个 CSS 样式表可以包含很多个规则。</p><h3 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h3></li><li><p>注释是用来解释你的代码，并且可以随意编辑它，浏览器会忽略它。</p></li><li><p>注释以”/*“开始，以”*/“结束</p><h3 id="应用CSS的三种方法"><a href="#应用CSS的三种方法" class="headerlink" title="应用CSS的三种方法"></a>应用CSS的三种方法</h3></li><li><p>外部样式表<font color="red">link</font>标签</p></li><li><p>内部样式表<font color="red">style</font>标签</p></li><li><p>内联样式表<font color="red">style</font>属性</p></li><li><p><font color="red">优先级：</font>内联样式（Inline style） &gt; 内部样式（Internal style sheet） &gt;外部样式（External style sheet） &gt; 浏览器默认样式</p><h3 id="CSS层叠与继承"><a href="#CSS层叠与继承" class="headerlink" title="CSS层叠与继承"></a>CSS层叠与继承</h3><h4 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h4></li><li><p>CSS中会出现规则“<strong>冲突</strong>”，通过“<strong>继承</strong>”与“层叠”解决冲突规则的适应问题</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4></li><li><p>继承也需要在上下文中去理解 —— 一些设置在父元素上的css属性是可以被子元素继承的，有些则不能。</p></li><li><p>例如：</p></li></ul><ol><li>设置一个元素的 color 和 font-family ，每个在里面的元素也都会有相同的属性，除非直接在元素上设置属性。</li><li>一些属性是不能继承的 — 举个例子如果你在一个元素上设置 width 50% ，所有的后代不会是父元素的宽度的50% 。<h4 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h4></li><li><strong>资源顺序</strong></li></ol><ul><li>顺序对于层叠的非常重要。如果有超过一条规则，而且都是相同的权重，那么最后面的规则会应用。可以理解为后面的规则覆盖前面的规则，直到最后一个开始设置样式。</li></ul><ol start="2"><li><strong>优先级</strong></li></ol><ul><li><p>“优先级”重要性高于“资源顺序”，这样会发现在一些情况下，有些规则在最后出现，但是却应用了前面的规则。</p></li><li><p>一个选择器的优先级可以说是由四个部分相加 (分量)，可以认为是个十百千 — 四位数的四个位数：</p><ol><li>千位： 如果声明在 style 的属性（内联样式）则该位得一分。这样的声明没有选择器，所以它得分总是1000。</li><li>百位： 选择器中包含ID选择器则该位得一分。</li><li>十位： 选择器中包含类选择器、属性选择器或者伪类则该位得一分。</li><li>个位：选择器中包含元素、伪元素选择器则该位得一分。<br><img src="https://p.ananas.chaoxing.com/star3/origin/2541cecff037d712742b23c17057f857.png"></li></ol></li></ul><ol start="3"><li><strong>重要(!important)</strong></li></ol><ul><li>有一个特殊的 CSS 可以用来覆盖所有上面所有优先级计算，不过需要很小心的使用 — !important。用于修改特定属性的值， 能够覆盖普通规则的层叠。<h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4></li><li>表示所有元素<center class="half">  <img src="https://p.ananas.chaoxing.com/star3/origin/b8dcbdf97fc98fd417ef2f1755d3bf4b.png" width="200" height="100">  <img src="https://p.ananas.chaoxing.com/star3/origin/0e3adbfcc82bf1f589619f788968bcc4.png" width="200" height="100"></center></li></ul><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><ul><li><p>ID选择器</p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/17c94185eb68d6948bdd2d5ff821de77.png"></p></li><li><p>类选择器 </p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/53937817b246ceef29484d48075705a9.png"></p></li><li><p>元素选择器</p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/c56e9ae61d3f4958219bc09d3b74c208.png"></p></li></ul><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p><img src="https://p.ananas.chaoxing.com/star3/origin/e9b5a2efd8d2405e9b6e69431e9bc565.png"></p><p><img src="https://p.ananas.chaoxing.com/star3/origin/4c509eeb725a814d1837cf3e40ca0b8c.png"></p><p><img src="https://p.ananas.chaoxing.com/star3/origin/134e966be94bf6546232f40e38ba1da4.png"></p><p> <img src="https://p.ananas.chaoxing.com/star3/origin/3d2fc069fcb0d642964b4e31a3783488.png"></p><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><ul><li><p>伪类<br>  <img src="https://p.ananas.chaoxing.com/star3/origin/eac88de243030ebf5e0f6662d43e3e8a.png"></p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/061f76f4c5317df03afae5878f3adba9.png"></p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/50e38b637809413d48ea2cce30cbe098.png"></p></li><li><p>伪元素</p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/eefa3843beb6e1cf02c1d091cf7a6d0b.png"></p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/3317829cfae4a9e1ac8fa7da044b90c8.png"><br>  <img src="https://p.ananas.chaoxing.com/star3/origin/f2ed036e03fbe752f624b992f1ccba62.png"></p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/0c23dce3baca233369347611215c20bd.png"><br>  <img src="https://p.ananas.chaoxing.com/star3/origin/efa4b26fdfe86e60315b60ec32f8d438.png"></p></li></ul><h4 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h4><ul><li><p>后代选择器(以空格分隔)</p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/71c90ccd7f45a8ae167a6b8e6dcded9e.png"></p></li><li><p>子元素选择器(以大于号分隔)</p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/438ed0c4da4edbf81a20f2baed0b9921.png"></p></li><li><p>相邻兄弟选择器(以加号分隔)</p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/f2417875baba411b01a5d6bbbc52fb2a.png"></p></li><li><p>普通兄弟选择器(以波浪线分隔)</p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/12e703a902dc6dca604a3063cd858fef.png"></p></li></ul><h2 id="9-CSS盒子模型-Box-Model"><a href="#9-CSS盒子模型-Box-Model" class="headerlink" title="9.CSS盒子模型(Box Model)"></a>9.CSS盒子模型(Box Model)</h2><h3 id="块级盒子与内联盒子"><a href="#块级盒子与内联盒子" class="headerlink" title="块级盒子与内联盒子"></a>块级盒子与内联盒子</h3><ul><li><strong>在 CSS 中，所有的元素都被一个个的“盒子（box）”包围着，理解这些“盒子”的基本原理，是使用CSS实现准确布局、处理元素排列的关键。</strong></li><li><strong>在 CSS 中被广泛地使用两种“盒子” —— 块级盒子 (block box) 和 内联盒子 (inline box)。这两种盒子会在页面流（Page Flow）和元素之间的关系方面表现出不同的行为:</strong></li></ul><ol><li><strong>块级盒子(Block box)</strong><ul><li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽</li><li>每个盒子都会换行</li><li>width 和 height 属性起作用</li><li>内边距（padding）, 外边距（margin） 和 边框（border） 会将其他元素从当前盒子周围“推开”</li><li>div、h1、p、pre等默认情况下都是块级的盒子</li></ul></li><li><strong>内联盒子</strong><ul><li>盒子不会产生换行。</li><li>width 和 height 属性将不起作用。</li><li>内边距、外边距以及边框会被应用。</li><li>span、 a 都是默认情况下都是内联的盒子</li></ul></li></ol><ul><li><strong>通过对盒子display 属性的设置，比如 inline 或者 block ，来改变盒子的显示。</strong></li></ul><ol start="3"><li><strong>在内联和块之间提供了一个中间状态  display: inline-block</strong><ul><li>设置width 和height 属性会生效。</li><li>padding, margin, 以及border 会推开其他元素。</li><li>不会跳转到新行<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3></li></ul></li></ol><ul><li>完整的 CSS 盒模型应用于块级盒子，内联盒子只使用盒模型中定义的部分内容。模型定义了盒的每个部分 —— margin, border, padding, content —— 合在一起就可以创建在页面上看到的内容。</li></ul><ol><li><p><strong>CSS中块级盒子</strong></p><ul><li>Content(内容) Box: 这个区域是用来显示内容，大小可以通过设置 width 和 height。</li><li>Border(边框) Box: 边框盒包裹内容和内边距。大小通过 border 相关属性设置。</li><li>Margin(外边距) Box: 这是最外面的区域，是盒子和其他元素之间的空白区域。大小通过 margin 相关属性设置。<center class="half"><img src="https://p.ananas.chaoxing.com/star3/origin/cd5308706a7f60997862be1ca2520bc5.png"></center></li></ul></li><li><p><strong>标准盒子模型</strong></p><ul><li><p>在标准模型中，设置 width 和 height，实际设置的是 content box。padding 和 border 再加上设置的宽高一起决定整个盒子的大小。</p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/dd6bdee7d5cf8c9db744dd7e9524a5c5.png"></p></li><li><p>标准盒子大小为宽度410px = 350 + 25 + 25 + 5 + 5，高度210px = 150 + 25 + 25 + 5 + 5</p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/46149b9f71fde909c254794fbdf1bdd9.png"></p><ul><li> margin 不计入实际大小。当然，它会影响盒子在页面所占空间，但是影响的是盒子外部空间。<h3 id="盒子模型的各个部分"><a href="#盒子模型的各个部分" class="headerlink" title="盒子模型的各个部分"></a>盒子模型的各个部分</h3><h4 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h4></li></ul></li></ul></li></ol><ul><li><p>width</p></li><li><p>max-width</p></li><li><p>min-width</p></li><li><p>height</p></li><li><p>max-height</p></li><li><p>min-height</p><h4 id="margin——外边距"><a href="#margin——外边距" class="headerlink" title="margin——外边距"></a>margin——外边距</h4></li></ul><ol><li><strong>margin</strong></li></ol><ul><li>margin属性为给定元素设置所有四个（上下左右）方向的外边距属性。这是四个外边距属性设置的简写。</li><li>四个外边距属性设置分别是： margin-top， margin-right， margin-bottom 和 margin-left 。</li><li>指定的外边距允许为负数。</li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/66754d7b54c80d9f8d6d3a123027a5f1.png"></p><ul><li>使用 margin: 0 auto 水平居中</li></ul><ol start="2"><li><strong>合并外边距</strong></li></ol><ul><li>当块级元素（block）的上外边距(margin-top)和下外边距(margin-bottom)同时都有设定时只会只会保留最大边距，这种行为称为边界折叠（margin collapsing）。<h4 id="border——外边框"><a href="#border——外边框" class="headerlink" title="border——外边框"></a>border——外边框</h4></li><li>border属性是一个用于设置各种单独的边界属性的简写属性。border可以用于设置一个或多个以下属性的值： border-width, border-style, border-color。</li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/f152feffa5a6018e700bf68b6b6959c6.png"></p><ul><li>可以使用border属性一次设置所有四个边框的宽度、颜色和样式。</li><li>分别设置每边的宽度、颜色和样式，可以使用：<ul><li>border-top</li><li>border-right</li><li>border-bottom</li><li>border-left</li></ul></li><li>设置所有边的颜色、样式或宽度，请使用以下属性：<ul><li>border-width</li><li>border-width</li><li>border-color</li></ul></li><li>设置单边的颜色、样式或宽度，可以使用最细粒度的普通属性之一：<ul><li>border-top-width    </li><li> border-top-style</li><li> border-top-color</li><li> border-right-width</li><li> border-right-style</li><li> border-right-color</li><li> border-bottom-width</li><li> border-bottom-style</li><li> border-bottom-color</li><li> border-left-width</li><li> border-left-style</li><li> border-left-color<h4 id="padding——内边距"><a href="#padding——内边距" class="headerlink" title="padding——内边距"></a>padding——内边距</h4></li></ul></li><li>padding属性设置一个元素的内边距，padding 区域指一个元素的内容和其边界之间的空间，该属性不能为负值。</li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/728938322c908852b1751e9fea0d74a5.png"></p><ul><li>padding-bottom</li><li>padding-left</li><li>padding-right</li><li>padding-top<h3 id="内容溢出"><a href="#内容溢出" class="headerlink" title="内容溢出"></a>内容溢出</h3></li><li>CSS中万物皆盒，可以通过给width和height赋值的方式来约束盒子的尺寸。但当盒子里面塞太多东西的时候会发生溢出。CSS就不会隐藏溢出的内容，因为隐藏引起的“数据损失”通常会造成困扰。</li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/a05d1e4d4fefaa240f6fdfc1e8eb88be.png"></p><ul><li>CSS属性 overflow 定义当一个元素的内容太大而无法适应 块级格式化上下文 时候该做什么。它是 overflow-x 和overflow-y的 简写属性 。</li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/1711372acd569ee9b4425db32189c66c.png"></p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><blockquote><p>默认情况下，块级元素在视口中垂直布局——每个都将显示在上一个元素下面的新行上，并且它们的外边距将分隔开它们。</p></blockquote><blockquote><p>内联元素互相之间以及任何相邻（或被包裹）的文本内容位于同一行上，只要在父块级元素的宽度内有空间可以这样做。如果没有空间，那么溢流的文本或元素将向下移动到新行。</p></blockquote><blockquote><p>定位是允许覆盖正常的基本文档流行为。例如，可以创建一个浮动在页面其他部分顶部的UI元素，并且/或者始终停留在浏览器窗口内的相同位置，无论页面滚动多少。要定义某个元素上的特定类型的定位，需要使用position属性。</p></blockquote><ol><li><strong>定位(position)</strong><ul><li>静态定位（static）：是每个元素获取的默认值——它只是意味着将元素放入它在文档布局流中的正常位置。</li><li>相对定位（relative）：相对定位元素的定位是相对其正常位置，移动相对定位元素，但它原本所占的空间不会改变。</li><li>相对定位（relative）：相对定位元素的定位是相对其正常位置，移动相对定位元素，但它原本所占的空间不会改变。</li><li>绝对定位（absolute）：绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于&lt;html&gt;。元素的位置与文档流无关，因此不占据空间。</li><li>粘贴定位（sticky）：基于用户的滚动位置来定位。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。</li></ul></li></ol><ul><li>①元素可以使用的顶部（top），底部（bottom），左侧（left）和右侧（right）属性进行定位。</li><li>②使用虚拟的Z轴（z-index）重叠元素的性质。当元素之间重叠的时候， z-index 较大的元素会覆盖较小的元素在上层进行显示。默认情况下，定位的元素都具有z-index为auto，实际上为0。<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3></li></ul><ol><li><strong>FLoat(浮动)</strong><blockquote><p>使元素向左或向右移动，其周围的元素也会重新排列。使元素向左或向右移动，其周围的元素也会重新排列。</p></blockquote></li><li><strong>清除浮动</strong><ul><li>left：停止任何活动的左浮动</li><li>right：停止任何活动的右浮动</li><li>both：停止任何活动的左右浮动<h2 id="10-CSS常见样式属性"><a href="#10-CSS常见样式属性" class="headerlink" title="10.CSS常见样式属性"></a>10.CSS常见样式属性</h2><h3 id="值与单位"><a href="#值与单位" class="headerlink" title="值与单位"></a>值与单位</h3></li></ul></li><li><strong>数字，长度与百分比</strong></li></ol><p><img src="https://p.ananas.chaoxing.com/star3/origin/dbdab8a9292582a24332f3b0f6737e76.png"></p><ul><li>长度<ul><li>CSS中有两种类型的长度——相对长度和绝对长度</li></ul></li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/3fad43bed6b7054123c08787e1070f9d.png"></p><p><img src="https://p.ananas.chaoxing.com/star3/origin/6d76019c5b3cb623c245a5ccd0c65536.png"></p><ul><li>数字<ul><li>有些值接受数字，不添加任何单位。接受无单位数字的属性的一个例子是不透明度属性（opacity ），它控制元素的不透明度(它的透明程度)。此属性接受0(完全透明)和1(完全不透明)之间的数字。</li></ul></li></ul><ol start="2"><li><strong>颜色</strong></li></ol><ul><li>颜色关键词</li><li>十六进制RGB值</li><li>RGB值</li></ul><ol start="3"><li><strong>图片</strong></li></ol><ul><li>通过url()函数指向的实际图像文件</li></ul><ol start="4"><li><strong>位置</strong></li></ol><ul><li>表示一组2D坐标，用于定位一个元素，如背景图像(通过 background-position)。它可以使用关键字(如 top, left, bottom, right, 以及center )将元素与2D框的特定边界对齐，以及表示框的顶部和左侧边缘偏移量的长度。</li></ul><ol start="5"><li><strong>字符串和标识符</strong></li></ol><ul><li>关键字被用作值的地方(例如颜色关键字，如 red, black, rebeccapurple, and goldenrod)。这些关键字被更准确地描述为标识符，一个CSS可以理解的特殊值。因此它们没有使用引号括起来——它们不被当作字符串。</li></ul><ol start="6"><li><strong>函数</strong></li></ol><ul><li>颜色部分看到了函数的作用——rgb()、hsl()等。用于从文件返回图像的值——url()——也是一个函数。calc()函数能够在CSS中进行简单的计算。<h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3></li><li>作用于字体的属性，会直接应用到文本中，比如使用哪种字体，字体的大小是怎样的，字体是粗体还是斜体，等等。<ul><li>font（字体）：font 属性可以用来作为 font-style, font-variant, font-weight, font-size, line-height 和 font-family 属性的简写，或将元素的字体设置为系统字体。</li><li>color（颜色）</li><li>font-family（字体种类）</li><li>font-size（字体大小）</li><li>font-style（字体样式）</li><li>font-weight（字体粗细）<h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3></li></ul></li><li>影响文本布局的属性<ul><li>text-align（文本对齐）</li><li>line-height（行高）</li><li>text-decoration（文本装饰）</li><li>text-indent（文本缩进）</li><li>letter-spacing（字母间距）</li><li>word-spacing（单词间距）<h3 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h3></li></ul></li><li>列表样式<ul><li>list-style-type ：设置用于列表的项目符号的类型，例如无序列表的方形或圆形项目符号，或有序列表的数字，字母或罗马数字。</li><li>list-style-position ：设置在每个项目开始之前，项目符号是出现在列表项内，还是出现在其外。</li><li>list-style-image ：允许您为项目符号使用自定义图片，而不是简单的方形或圆形。</li><li>list-style：简写属性。属性值可以任意顺序排列，你可以设置一个，两个或者三个值（该属性的默认值为 disc, none, outside）。<h3 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h3></li></ul></li><li>背景样式<ul><li>background-color（背景颜色）：定义了CSS中任何元素的背景颜色。属性接受任何有效的<color>值。背景色扩展到元素的内容和内边距的下面。</color></li><li>background-image（背景图片）：允许在元素的背景中显示图像。</li><li>background-repeat（背景平铺）：用于控制图像的平铺行为。</li><li>background-position（背景定位）：允许选择背景图像显示在其应用到的盒子中的位置。它使用的坐标系中，框的左上角是(0,0)，框沿着水平(x)和垂直(y)轴定位。</li><li>background-attachment（背景附加）：指定内容滚动时，背景滚动方式。</li><li>background（背景）：是一种 CSS 简写属性，用于一次性集中定义各种背景属性，包括 color, image, origin 与 size, repeat 方式等等。<h3 id="表格样式"><a href="#表格样式" class="headerlink" title="表格样式"></a>表格样式</h3></li></ul></li><li>表格样式<ul><li>table-layout（布局）</li><li>border-collapse（间距）</li><li>border-spacing（相邻单元格边框之间的距离）</li><li>caption-side（标题位置）</li><li>empty-cells（无内容单元格）<h3 id="表单样式"><a href="#表单样式" class="headerlink" title="表单样式"></a>表单样式</h3></li></ul></li><li>表单元素没有单独的样式属性，由于历史和技术的原因，表单元素不能很好地与CSS配合工作。可以分为三类：<ul><li>一类是跨平台下表现一致的的，例如：&lt;form&gt;&lt;fieldset&gt;&lt;label&gt;&lt;output&gt;以及文本字段（单行和多行）和按钮。</li><li>一类是跨平台下比较难取得一致表现的，需要更多的CSS技巧，例如：&lt;legend&gt;、&lt;checkbox&gt;和&lt;radio&gt;按钮。</li><li>一类是无法应用样式的，例如：所有高级用户界面小部件，如范围，颜色或日期控件; 和所有下拉小部件，包括&lt;select&gt;, &lt;option&gt;, &lt;optgroup&gt;和&lt;datalist&gt; 元素。</li></ul></li><li>表单重置</li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/fa3ae7504396157c41aa38b49744bcff.png"></p><h2 id="11-CSS应用"><a href="#11-CSS应用" class="headerlink" title="11.CSS应用"></a>11.CSS应用</h2><h3 id="样式重置-CSS-Reset"><a href="#样式重置-CSS-Reset" class="headerlink" title="样式重置(CSS Reset)"></a>样式重置(CSS Reset)</h3><ol><li><strong>Global White Space Reset</strong></li></ol><ul><li><p>{margin: 0;padding: 0}</p></li><li><p>Reset.css</p><ul><li>最先作者: Eric Meyer</li><li>目的: 在各浏览器达到统一的效果</li><li>链接: <a href="https://meyerweb.com/eric/tools/css/reset/">https://meyerweb.com/eric/tools/css/reset/</a></li><li>YUI Reset: <a href="https://yuilibrary.com/yui/docs/cssreset/cssreset-basic-example.html">https://yuilibrary.com/yui/docs/cssreset/cssreset-basic-example.html</a></li></ul></li><li><p>Normalize.css</p><ul><li>由Nicolas Gallagher和Jonathan Neal维护的一个CSS重置样式库，Bootstrap用的就是normalization.css。</li><li>很多人说reset.css太暴力了，normalize.css相对要温柔一些。normalize.css修复了不同浏览器常见的不一致，规范化常见的组件风格，保存有用的默认值。因此，选择用Normalize.css来取代其它的CSS Resets。</li><li>链接<a href="http://necolas.github.io/normalize.css">http://necolas.github.io/normalize.css</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web用户面板&quot;&gt;&lt;a href=&quot;#Web用户面板&quot; class=&quot;headerlink&quot; title=&quot;Web用户面板&quot;&gt;&lt;/a&gt;Web用户面板&lt;/h1&gt;&lt;h2 id=&quot;1-开发工具&quot;&gt;&lt;a href=&quot;#1-开发工具&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="CSS" scheme="https://ten-fei.gitee.io/categories/CSS/"/>
    
    
    <category term="css使用教程" scheme="https://ten-fei.gitee.io/tags/css%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ten-fei.gitee.io/2021/01/01/hello-world/"/>
    <id>https://ten-fei.gitee.io/2021/01/01/hello-world/</id>
    <published>2020-12-31T16:00:00.000Z</published>
    <updated>2021-01-22T12:15:35.677Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Hello World" scheme="https://ten-fei.gitee.io/categories/Hello-World/"/>
    
    
    <category term="Hello World" scheme="https://ten-fei.gitee.io/tags/Hello-World/"/>
    
  </entry>
  
</feed>
